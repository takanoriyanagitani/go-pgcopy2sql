package convert

// This is generated go file using go run pgcopytype.go. NEVER EDIT.

import (
	"context"

	ps "github.com/takanoriyanagitani/go-pgcopy2sql"
	util "github.com/takanoriyanagitani/go-pgcopy2sql/util"
)

func BytesTo{{.TypeHint}}New() func([]byte)(*ps.{{.PgcopyTypeName}}, error){
	var buf ps.{{.PgcopyTypeName}}
	return func(raw []byte)(*ps.{{.PgcopyTypeName}}, error){
		buf.Reset()
		i, e := ps.{{.TypeHint}}FromBytes(raw)
		if nil == e {
			buf.SetValue(i)
		}
		return &buf, nil
	}
}

func ConfigToConverter{{.TypeHint}}(
	_ ConvertConfig,
) func([]byte) util.IO[ps.Value] {
	var conv func(
		[]byte,
	)(*ps.{{.PgcopyTypeName}}, error) = BytesTo{{.TypeHint}}New()
	return func(raw []byte) util.IO[ps.Value] {
		return func(_ context.Context)(ps.Value, error){
			return conv(raw)
		}
	}
}

// Slow converter which may use heap allocation.
func (t {{.TypeName}}) Convert()(*ps.{{.PgcopyTypeName}}, error) {
	var conv func(
		[]byte,
	)(*ps.{{.PgcopyTypeName}}, error) = BytesTo{{.TypeHint}}New()
	return conv(t)
}

func BytesTo{{.TypeHint}}NewN() func([]byte)(*ps.{{.PgcopyTypeName}}N, error){
	var buf ps.{{.PgcopyTypeName}}N
	return func(raw []byte)(*ps.{{.PgcopyTypeName}}N, error){
		buf.Reset()
		if nil == raw {
			return &buf, nil
		}

		i, e := ps.{{.TypeHint}}FromBytes(raw)
		if nil == e {
			buf.SetValue(i)
		}
		return &buf, nil
	}
}

func ConfigToConverter{{.TypeHint}}N(
	_ ConvertConfig,
) func([]byte) util.IO[ps.Value] {
	var conv func(
		[]byte,
	)(*ps.{{.PgcopyTypeName}}N, error) = BytesTo{{.TypeHint}}NewN()
	return func(raw []byte) util.IO[ps.Value] {
		return func(_ context.Context)(ps.Value, error){
			return conv(raw)
		}
	}
}
